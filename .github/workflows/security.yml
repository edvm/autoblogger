name: Security Scanning

on:
  schedule:
    # Run security scans every day at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          config-file: './.github/dependency-review-config.yml'
          fail-on-severity: 'moderate'
          warn-only: false

  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install UV
      uses: astral-sh/setup-uv@v6
    
    - name: Install dependencies
      run: |
        uv sync --frozen
    
    - name: Run Bandit Security Scan
      run: |
        uv run bandit -r . -f json -o bandit-report.json || true
        uv run bandit -r . -f txt
    
    - name: Run Safety Dependency Check
      run: |
        uv run safety check --json --output safety-report.json || true
        uv run safety check
    
    - name: Run Semgrep Security Analysis
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/django
          p/flask
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: Upload Semgrep results to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
          semgrep.sarif
        retention-days: 30

  nodejs-security:
    name: Node.js Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        npm audit --json > npm-audit-report.json || true
        npm audit
    
    - name: Run Snyk Security Test
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=frontend/package.json
      continue-on-error: true
    
    - name: Upload Node.js security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nodejs-security-reports
        path: |
          frontend/npm-audit-report.json
          frontend/snyk-report.json
        retention-days: 30

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Build Backend Docker Image
      run: |
        docker build -t autoblogger/backend:security-scan ./backend || echo "Backend Dockerfile not found"
    
    - name: Build Frontend Docker Image  
      run: |
        docker build -t autoblogger/frontend:security-scan ./frontend || echo "Frontend Dockerfile not found"
    
    - name: Run Trivy Vulnerability Scanner - Backend
      if: success()
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'autoblogger/backend:security-scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
    
    - name: Run Trivy Vulnerability Scanner - Frontend
      if: success()
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'autoblogger/frontend:security-scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: '*-trivy-results.sarif'

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security, secret-scanning]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v4
      with:
        path: security-reports
    
    - name: Generate Security Summary
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "- Python Security: ${{ needs.python-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js Security: ${{ needs.nodejs-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.python-security.result }}" == "success" && 
              "${{ needs.nodejs-security.result }}" == "success" && 
              "${{ needs.secret-scanning.result }}" == "success" ]]; then
          echo "## ✅ All security scans passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Some security scans require attention" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "Security reports have been uploaded as artifacts for detailed review." >> $GITHUB_STEP_SUMMARY